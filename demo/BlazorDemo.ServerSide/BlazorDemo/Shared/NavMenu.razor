@using BlazorDemo.Configuration
@inject DemoConfiguration Configuration
@inject NavigationManager NavigationManager

<DxTreeView @ref="@treeView"
            CssClass="sidebar-tree"
            ExpandButtonIconCssClass="demo-icon-expand"
            CollapseButtonIconCssClass="demo-icon-collapse"
            NodeExpandCollapseAction="TreeViewNodeExpandCollapseAction.NodeClick"
            AllowSelectNodes="true"
            SelectionChanged="@SelectionChanged">
    <Nodes>
        @foreach(var (currentPage, rootIndex) in Pages.Select((p, i) => (p, i))) {
            <NavMenuLeaf Page="@currentPage"></NavMenuLeaf>
        }

    </Nodes>
</DxTreeView>
@code {
    DxTreeView treeView;

    [Parameter]
    public IEnumerable<DemoPageBase> Pages { get; set; }

    protected override void OnInitialized() {
        NavigationManager.LocationChanged += OnLocationChanged;
    }
    protected override void OnAfterRender(bool firstRender) {
        UpdateSelection(NavigationManager.Uri, true);
    }
    void OnLocationChanged(object sender, LocationChangedEventArgs args) {
        UpdateSelection(NavigationManager.Uri, true);
    }
    void UpdateSelection(string currentUri, bool expandNodesToSelection) {
        treeView.SelectNode(n => {
            if(!string.IsNullOrEmpty(n.NavigateUrl) && (currentUri.EndsWith(n.NavigateUrl) || currentUri == NavigationManager.BaseUri && n.NavigateUrl == "./")) {
                if(expandNodesToSelection)
                    ExpandParentNodes(n);
                return true;
            }
            return false;
        });
    }
    void ExpandParentNodes(ITreeViewNodeInfo node) {
        treeView.CollapseAll();
        treeView.ExpandToNode(n => n == node);
    }
    protected void SelectionChanged(TreeViewNodeEventArgs e) {
        if(!e.CausedByAPI && string.IsNullOrEmpty(e.NodeInfo.NavigateUrl)) 
            UpdateSelection(NavigationManager.Uri, false);
    }
    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

}

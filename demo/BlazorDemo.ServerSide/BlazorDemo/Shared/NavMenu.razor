@using BlazorDemo.Configuration
@inject DemoConfiguration Configuration
<DxTreeView @ref="@treeView"
            CssClass="sidebar-tree"
            ExpandButtonIconCssClass="demo-icon-expand"
            CollapseButtonIconCssClass="demo-icon-collapse"
            AllowSelectNodes="true"
            NodeExpandCollapseAction="TreeViewNodeExpandCollapseAction.NodeClick"
            BeforeExpand="@BeforeExpand"
            SelectionChanged="@SelectionChanged">
    <Nodes>
        @foreach(var (rootDemoPage, rootIndex) in Configuration.RootPages.Select((p, i) => (p, i))) {
            @if(!Configuration.IsServerSide && rootDemoPage.IsServerSideOnly)
                continue;

            @if(rootDemoPage.Pages.Length > 0) {
                <DxTreeViewNode Text="@rootDemoPage.Title" CssClass="@GetItemCssClass(rootDemoPage)" NavigateUrl="@rootDemoPage.Url" BadgeText="@GetBadgeText(rootDemoPage)">
                    <Nodes>
                        @foreach(var (demoPage, index) in rootDemoPage.Pages.Select((p, i) => (p, i))) {
                            <DxTreeViewNode Text="@demoPage.Title" NavigateUrl="@demoPage.Url" BadgeText="@GetBadgeText(demoPage)">
                            </DxTreeViewNode>
                        }
                    </Nodes>
                </DxTreeViewNode>
            } else {
                <DxTreeViewNode Text="@rootDemoPage.Title" NavigateUrl="@rootDemoPage.Url" BadgeText="@GetBadgeText(rootDemoPage)">
                </DxTreeViewNode>
            }
        }
    </Nodes>
</DxTreeView>

@code {
    DxTreeView treeView;

    protected void SelectionChanged(TreeViewNodeEventArgs e) {
        if(e.NodeInfo.IsLeaf) {
            var parentInfo = e.NodeInfo.Parent;
            if(parentInfo != null) {
                var parentSiblingNodesInfo = treeView.GetNodesInfo(n => !n.IsLeaf && n.Level == parentInfo.Level && !string.Equals(n.Text, parentInfo.Text));
                foreach(var nodeInfo in parentSiblingNodesInfo)
                    treeView.SetNodeExpanded(n => string.Equals(n.Text, nodeInfo.Text), false);
            } else
                treeView.CollapseAll();
        }
    }

    protected void BeforeExpand(TreeViewNodeCancelEventArgs e) {
        if(!e.CausedByAPI)
            treeView.CollapseAll();
    }

    protected string GetBadgeText(DemoPageBase page) {
        if(page.IsPreview)
            return "CTP";
        bool isChildrenUpdated =
            page is DemoRootPage && ((DemoRootPage)page).Pages.Where(p => p.IsNew || p.IsUpdated).Any() ||
            page is DemoPage && ((DemoPage)page).PageSections.Where(s => s.IsNew || s.IsUpdated).Any();
        if(isChildrenUpdated || page.IsUpdated)
            return "Upd";
        if(page.IsNew)
            return "New";
        return "";
    }
    protected string GetItemCssClass(DemoPageBase page) {
        if(page.IsPreview)
            return "item-ctp";
        return "";
    }
}

<DemoPageSectionComponent Id="Grid-Filtering-FilterRow" ShowHorizontalScrollBar="true" VerticalAlignment="VerticalAlignment.Top">
    <ChildContentWithParameters Context="Params">
        @using DevExpress.Data.Filtering;
        @inject NwindDataService NwindDataService

        <DxGrid Data="GridData"
                ShowFilterRow="true"
                CustomizeCellDisplayText="Grid_CustomizeCellDisplayText"
                CssClass="w-100">
            <Columns>
                <DxGridDataColumn FieldName="OrderId" DisplayFormat="d" SortIndex="0" Width="120px">
                    <FilterRowCellTemplate>
                        <DxSpinEdit Value="(int?)context.FilterRowValue"
                                    ValueChanged="(int? v) => context.FilterRowValue = v"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </FilterRowCellTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName="OrderDate" DisplayFormat="d" Width="150px">
                    <FilterRowCellTemplate>
                        <DxDateEdit Date="(DateTime?)context.FilterRowValue"
                                    DateChanged="(DateTime? v) => context.FilterRowValue = v"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </FilterRowCellTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName="ProductName"
                                  FilterRowValue='"Queso"' FilterRowOperatorType="GridFilterRowOperatorType.Contains" />

                <DxGridDataColumn FieldName="UnitPrice" DisplayFormat="c2" Width="150px">
                    <FilterRowCellTemplate>
                        <DxComboBox @bind-Value="context.FilterCriteria"
                                    Data="UnitPriceIntervals" ValueFieldName="Criteria" TextFieldName="DisplayText"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </FilterRowCellTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName="CustomerId" Caption="Customer" SortMode="GridColumnSortMode.DisplayText">
                    <FilterRowCellTemplate>
                        <DxComboBox Value="(string)context.FilterRowValue"
                                    ValueChanged="(string v) => context.FilterRowValue = v"
                                    Data="Customers" ValueFieldName="CustomerId" TextFieldName="DisplayText"
                                    FilteringMode="DataGridFilteringMode.Contains"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </FilterRowCellTemplate>
                </DxGridDataColumn>

                <DxGridDataColumn FieldName="Shipped" UnboundType="GridUnboundColumnType.Boolean" UnboundExpression="[ShippedDate] <> Null" Width="100px">
                    <CellDisplayTemplate>
                        <DxCheckBox CssClass="d-inline-block" Enabled="false" Checked="(bool)context.Value" />
                    </CellDisplayTemplate>
                    <FilterRowCellTemplate>
                        <DxComboBox Value="(bool?)context.FilterRowValue"
                                    ValueChanged="(bool? v) => context.FilterRowValue = v"
                                    Data="ShippedStates" ValueFieldName="Value" TextFieldName="DisplayText"
                                    ClearButtonDisplayMode="DataEditorClearButtonDisplayMode.Auto" />
                    </FilterRowCellTemplate>
                </DxGridDataColumn>

                <DxGridCommandColumn />
            </Columns>
        </DxGrid>

        @code {
            static readonly IReadOnlyList<PriceFilterInterval> UnitPriceIntervals = new PriceFilterInterval[] {
                new("[UnitPrice] < 10", "< $10"),
                new("[UnitPrice] between (10, 100)", "$10 to $100"),
                new("[UnitPrice] > 100", "> $100")
            };

            static readonly IReadOnlyList<ShippedState> ShippedStates = new ShippedState[] {
                new(true, "Yes"),
                new(false, "No")
            };

            object GridData { get; set; }

            IReadOnlyList<CustomerInfo> Customers { get; set; }
            IReadOnlyDictionary<string, string> CustomersIndex { get; set; }

            protected override async Task OnInitializedAsync() {
                GridData = await NwindDataService.GetInvoicesAsync();

                Customers = (await NwindDataService.GetCustomersAsync())
                    .Select(i => new CustomerInfo(i.CustomerId, $"{i.ContactName} ({i.CompanyName})"))
                    .OrderBy(i => i.DisplayText)
                    .ToList();

                CustomersIndex = Customers.ToDictionary(i => i.CustomerId, i => i.DisplayText);
            }

            void Grid_CustomizeCellDisplayText(GridCustomizeCellDisplayTextEventArgs e) {
                if (e.FieldName == "CustomerId") {
                    var customerId = (string)e.Value;
                    if (customerId != null && CustomersIndex.TryGetValue(customerId, out var displayText))
                        e.DisplayText = displayText;
                }
            }

            record PriceFilterInterval(CriteriaOperator Criteria, string DisplayText) {
                public PriceFilterInterval(string CriteriaText, string DisplayText)
                    : this(CriteriaOperator.Parse(CriteriaText), DisplayText) {
                }
            }

            record ShippedState(bool? Value, string DisplayText);
            record CustomerInfo(string CustomerId, string DisplayText);
        }
    </ChildContentWithParameters>
</DemoPageSectionComponent>

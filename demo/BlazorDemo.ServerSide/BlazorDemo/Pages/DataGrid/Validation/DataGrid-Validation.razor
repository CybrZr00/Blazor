@page "/GridEditFormTemplateValidation"

<DemoPageSectionComponent Id="DataGrid-Validation" ShowHorizontalScrollBar="true">
    @if(Vacancies == null) {
        <p><em>Loading...</em></p>
    } else {
        <DxDataGrid @ref="@grid"
                    Data="@Vacancies"
                    ShowPager="false"
                    RowRemoving="@((dataItem) => OnRowRemoving(dataItem))"
                    RowEditStart="@(dataItem => OnRowEditStarting(dataItem))"
                    RowInsertStart="@(() => OnRowEditStarting(null))">
            <Columns>
                <DxDataGridCommandColumn Width="150px" />
                <DxDataGridColumn Field="@nameof(Vacancy.Description)" Caption="Vacancy" />
                <DxDataGridComboBoxColumn Field="@nameof(Vacancy.Region)" Data="@VacancyRepository.Regions" />
                <DxDataGridColumn Field="@nameof(Vacancy.City)" />
            </Columns>
            <EditFormTemplate>
                <EditForm Model="@EditContext" Context="EditFormContext" OnValidSubmit="@HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <DxFormLayout>
                        <DxFormLayoutItem Caption="Vacancy Description:" ColSpanMd="12" Context="FormLayoutContext">
                            <Template>
                                <DxTextBox @bind-Text="@EditContext.Description" />
                            </Template>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="Region:" ColSpanMd="6" Context="FormLayoutContext">
                            <Template>
                                <DxComboBox Data="@VacancyRepository.Regions"
                                            NullText="Select Region..."
                                            @bind-Value="@EditContext.Region">
                                </DxComboBox>
                            </Template>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem Caption="City:" ColSpanMd="6" Context="FormLayoutContext">
                            <Template>
                                <DxComboBox Data="@EditContext.OfficeLocations"
                                            NullText="Select City..."
                                            @bind-Value="@EditContext.City">
                                </DxComboBox>
                            </Template>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                            <Template>
                                <ValidationSummary />
                            </Template>
                        </DxFormLayoutItem>
                        <DxFormLayoutItem ColSpanMd="12" Context="FormLayoutContext">
                            <Template>
                                <div class="text-right">
                                    <DxButton RenderStyle="ButtonRenderStyle.Link" SubmitFormOnClick="true" Text="Update" />
                                    <DxButton RenderStyle="ButtonRenderStyle.Link" Click="OnCancelButtonClick" Text="Cancel" />
                                </div>
                            </Template>
                        </DxFormLayoutItem>
                    </DxFormLayout>
                </EditForm>
            </EditFormTemplate>
        </DxDataGrid>
    }

    @code {
        DxDataGrid<Vacancy> grid;
        IEnumerable<Vacancy> Vacancies;

        protected override async Task OnInitializedAsync() {
            Vacancies = await VacancyRepository.GetVacancies(3);
        }

        class FormEditContext {
            public FormEditContext(Vacancy dataItem) {
                DataItem = dataItem;
                if(DataItem == null) {
                    DataItem = new Vacancy();
                    IsNewRow = true;
                }
                Description = DataItem.Description;
                Region = DataItem.Region;
                City = DataItem.City;
            }

            public Vacancy DataItem { get; set; }
            public bool IsNewRow { get; set; }

            [Required]
            [StringLength(maximumLength: 32, MinimumLength = 4,
            ErrorMessage = "The description should be 4 to 32 characters.")]
            public string Description { get; set; }

            string region;
            [Required]
            public string Region {
                get => region;
                set {
                    region = value;
                    City = null;
                    OfficeLocations = VacancyRepository.GetOfficeLocationsByRegion(value).Select(x => x.City);
                    StateHasChanged?.Invoke();
                }
            }

            [Required]
            public string City { get; set; }

            public IEnumerable<string> OfficeLocations = null;

            public Action StateHasChanged { get; set; }
        }

        FormEditContext EditContext = null;
        void OnRowEditStarting(Vacancy vacancy) {
            EditContext = new FormEditContext(vacancy);
            EditContext.StateHasChanged += () => { InvokeAsync(StateHasChanged); };
        }
        async Task OnCancelButtonClick() {
            await grid.CancelRowEdit();
            EditContext = null;
        }
        async Task HandleValidSubmit() {
            EditContext.DataItem.Description = EditContext.Description;
            EditContext.DataItem.Region = EditContext.Region;
            EditContext.DataItem.City = EditContext.City;
            if(EditContext.IsNewRow) {
                Vacancies = (new Vacancy[] { EditContext.DataItem }).Concat(Vacancies);
            }

            await grid.CancelRowEdit();
            await grid.Refresh();
        }

        void OnRowRemoving(Vacancy vacancy) {
            Vacancies = Vacancies.Where(v => v != vacancy).ToArray();
            InvokeAsync(StateHasChanged);
        }
    }
</DemoPageSectionComponent>

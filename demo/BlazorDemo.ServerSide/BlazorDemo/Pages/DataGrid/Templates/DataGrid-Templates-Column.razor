<DemoPageSectionComponent Id="DataGrid-Templates-Column" ShowHorizontalScrollBar="true">
    @inject NwindDataService NwindDataService

    @if(DataSource == null) {
        <p><em>Loading...</em></p>
    } else {
        <DxDataGrid Data="@DataSource"
                    RowRemovingAsync="@OnRowRemovingAsync"
                    RowUpdatingAsync="@OnRowUpdatingAsync"
                    RowInsertingAsync="@OnRowInsertingAsync"
                    RowEditStart="@(dataItem => OnRowEditStarting(dataItem))"
                    RowInsertStart="@(() => OnRowEditStarting(null))">
            <Columns>
                <DxDataGridCommandColumn Width="120px" />
                <DxDataGridColumn Field="FirstName" />
                <DxDataGridColumn Field="LastName" />
                <DxDataGridColumn Field="Title" />
                <DxDataGridColumn Field="@nameof(Employee.TitleOfCourtesy)" Width="150px" />
                <DxDataGridDateEditColumn Field="BirthDate" Width="150px" />
                <DxDataGridDateEditColumn Field="HireDate" Width="150px" />
                <DxDataGridColumn Field="Details" AllowSort="false" Width="90px">
                    <DisplayTemplate><a class="d-block text-left" href="javascript:;" @onclick="() => ShowDetails(context as Employee)">More Info...</a></DisplayTemplate>
                    <EditTemplate>
                        <DxMemo @bind-Text="@EditEmployeeNotes" Rows="5" />
                        <div class="text-muted pt-1" style="font-size:0.8em">Details should be 4 to 256 characters</div>
                    </EditTemplate>
                </DxDataGridColumn>
            </Columns>
        </DxDataGrid>
        <DxPopup @bind-Visible="@PopupVisible"
                 HeaderText="@PopupHeaderText"
                 HorizontalAlignment="HorizontalAlignment.Center"
                 VerticalAlignment="VerticalAlignment.Center">@PopupContent</DxPopup>
    }

    @code {
        IEnumerable<Employee> DataSource { get; set; }
        string EditEmployeeNotes { get; set; }
        Employee CurrentEmployee { get; set; }
        bool PopupVisible {
            get { return CurrentEmployee != null; }
            set { if(!value) CurrentEmployee = null; }
        }
        string PopupHeaderText {
            get { return CurrentEmployee != null ? CurrentEmployee.FirstName + " " + CurrentEmployee.LastName : ""; }
        }
        string PopupContent {
            get { return CurrentEmployee != null ? CurrentEmployee.Notes : ""; }
        }

        protected override async Task OnInitializedAsync() {
            DataSource = await NwindDataService.GetEmployeesEditableAsync();
        }
        public void ShowDetails(Employee context) {
            CurrentEmployee = context;
        }

        void OnRowEditStarting(Employee employee) {
            EditEmployeeNotes = employee?.Notes;
        }
        async Task OnRowRemovingAsync(Employee dataItem) {
            await NwindDataService.RemoveEmployeeAsync(dataItem);
            DataSource = await NwindDataService.GetEmployeesEditableAsync();
            StateHasChanged();
        }
        async Task OnRowUpdatingAsync(Employee dataItem, IDictionary<string, object> newValues) {
            newValues.Add(nameof(Employee.Notes), EditEmployeeNotes);
            await NwindDataService.UpdateEmployeeAsync(dataItem, newValues);
            DataSource = await NwindDataService.GetEmployeesEditableAsync();
            StateHasChanged();
        }
        async Task OnRowInsertingAsync(IDictionary<string, object> newValues) {
            newValues.Add(nameof(Employee.Notes), EditEmployeeNotes);
            await NwindDataService.InsertEmployeeAsync(newValues);
            DataSource = await NwindDataService.GetEmployeesEditableAsync();
            StateHasChanged();
        }
    }
</DemoPageSectionComponent>

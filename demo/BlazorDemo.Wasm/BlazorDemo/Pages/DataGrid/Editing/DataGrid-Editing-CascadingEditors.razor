<DemoPageSectionComponent Id="DataGrid-Editing-CascadingEditors" ShowHorizontalScrollBar="true">
    @inject NwindDataService NwindDataService
    @inject WorldcitiesDataService WorldcitiesDataService

    @if(Data == null) {
        <p><em>Loading...</em></p>
    } else {
        <DxDataGrid Data="@Data"
                    @ref="@grid"
                    ShowPager="false"
                    RowRemovingAsync="@((dataItem) => OnRowRemoving(dataItem))"
                    RowInsertingAsync="@((newValues) => OnRowInserting(newValues))"
                    RowUpdatingAsync="@((dataItem, newValues) => OnRowUpdating(dataItem, newValues))">
            <DxDataGridCommandColumn Width="150px"></DxDataGridCommandColumn>
            <DxDataGridColumn Field="CompanyName" />
            <DxDataGridColumn Field="ContactName" />
            <DxDataGridColumn Field="ContactTitle" />
            <DxDataGridColumn Field="Phone" />
            <DxDataGridComboBoxColumn Field="@nameof(Supplier.Country)" Data="@Countries">
                <EditTemplate>
                    @{
                        var editingContext = (CellEditContext)context;
                        var country = (string)editingContext.GetEditorValue(nameof(Supplier.Country));
                    }
                    <DxComboBox Data="@Countries"
                                NullText="Select Country..."
                                TextFieldName="@nameof(Country.CountryName)"
                                ValueFieldName="@nameof(Country.CountryName)"
                                Value="@country"
                                ValueChanged="@(EventCallback.Factory.Create(this, (string newCellValue) => {
                                                    editingContext.OnChanged(newCellValue);
                                                    editingContext.OnChanged(nameof(Supplier.City), null);
                                                    }))">
                    </DxComboBox>
                </EditTemplate>
            </DxDataGridComboBoxColumn>
            <DxDataGridColumn Field="@nameof(Supplier.City)">
                <EditTemplate>
                    @{
                        var editingContext = (CellEditContext)context;

                        var country = (string)editingContext.GetEditorValue(nameof(Supplier.Country));
                        var city = ((string)(editingContext.GetEditorValue(nameof(Supplier.City))));
                        var countryId = Countries.Where(c => c.CountryName == country).FirstOrDefault()?.CountryId;
                        var cities = Cities.Where(x => x.CountryId == countryId);
                    }
                    <DxComboBox Data="@cities"
                                NullText="Select City..."
                                Text="@city"
                                TextFieldName="@nameof(City.CityName)"
                                ValueFieldName="@nameof(City.CityName)"
                                ValueChanged="@(EventCallback.Factory.Create(this, (string newCellValue) => editingContext.OnChanged(newCellValue)))">
                    </DxComboBox>
                </EditTemplate>
            </DxDataGridColumn>
        </DxDataGrid>
    }

    @code {
        IEnumerable<Supplier> Data;
        IEnumerable<Country> Countries;
        IEnumerable<City> Cities;
        DxDataGrid<Supplier> grid;

        protected override async Task OnInitializedAsync() {
            Data = await NwindDataService.GetSuppliersEditableAsync();
            Countries = await WorldcitiesDataService.GetCountriesAsync();
            Cities = await WorldcitiesDataService.GetCitiesAsync();
        }
        protected override async Task OnAfterRenderAsync(bool firstRender) {
            if(firstRender) {
                var editableSupplier = Data.FirstOrDefault();
                await grid.StartRowEdit(editableSupplier);
            }
        }

        public void OnRegionChanged() {
            InvokeAsync(StateHasChanged);
        }
        async Task OnRowUpdating(Supplier supplier, IDictionary<string, object> newValues) {
            await NwindDataService.UpdateSupplierAsync(supplier, newValues);
            Data = await NwindDataService.GetSuppliersEditableAsync();
            StateHasChanged();
        }
        async Task OnRowRemoving(Supplier supplier) {
            await NwindDataService.RemoveSupplierAsync(supplier);
            Data = await NwindDataService.GetSuppliersEditableAsync();
            StateHasChanged();
        }
        async Task OnRowInserting(IDictionary<string, object> newValues) {
            await NwindDataService.InsertSupplierAsync(newValues);
            Data = await NwindDataService.GetSuppliersEditableAsync();
            StateHasChanged();
        }
    }
</DemoPageSectionComponent>

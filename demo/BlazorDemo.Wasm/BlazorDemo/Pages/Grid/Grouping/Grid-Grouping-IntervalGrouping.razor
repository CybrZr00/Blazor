<DemoPageSectionComponent Id="Grid-Grouping-IntervalGrouping" ShowHorizontalScrollBar="true">
    <ChildContent>
        @inject NwindDataService NwindDataService

        @if(Data == null) {
            <p><em>Loading...</em></p>
        } else {
            <DxGrid @ref="Grid"
                    Data="@Data"
                    ShowGroupPanel="true"
                    UnboundColumnData="Grid_UnboundColumnData"
                    CssClass="w-100">
                <Columns>
                    <DxGridColumn FieldName="ProductName" />
                    <DxGridColumn FieldName="CategoryName" />
                    <DxGridColumn FieldName="Country" Width="200px" />
                    <DxGridColumn FieldName="OrderDate" GroupIndex="0" GroupInterval="GridColumnGroupInterval.DateYear" />
                    <DxGridColumn FieldName="UnitPrice" DisplayFormat="c" Width="120px" />
                    <DxGridColumn FieldName="Quantity" Width="120px" />
                    <DxGridColumn FieldName="Total" UnboundType="GridUnboundColumnType.Decimal" DisplayFormat="c" Width="200px" />
                </Columns>
                <TotalSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="ProductName" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Total" />
                </TotalSummary>
                <GroupSummary>
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Count" FieldName="Country" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Quantity" />
                    <DxGridSummaryItem SummaryType="GridSummaryItemType.Sum" FieldName="Total" />
                </GroupSummary>
            </DxGrid>
        }
        @code {
            object Data { get; set; }
            Dictionary<string, GridColumnGroupInterval> GroupIntervals { get; } = new Dictionary<string, GridColumnGroupInterval> {
                { "Year", GridColumnGroupInterval.DateYear },
                { "Month", GridColumnGroupInterval.DateMonth },
                { "Date", GridColumnGroupInterval.Date }
            };
            string CurrentGroupIntervalKey { get; set; } = "Year";
            IGrid Grid { get; set; }

            protected override async Task OnInitializedAsync() {
                var invoices = await NwindDataService.GetInvoicesAsync();
                var products = await NwindDataService.GetProductsAsync();
                var categories = await NwindDataService.GetCategoriesAsync();
                Data = invoices.Join(products, i => i.ProductId, p => p.ProductId, (i, p) => {
                    return new {
                        ProductName = i.ProductName,
                        CategoryId = p.CategoryId,
                        Country = i.Country,
                        OrderDate = i.OrderDate,
                        UnitPrice = i.UnitPrice,
                        Quantity = i.Quantity
                    };
                }).Join(categories, i => i.CategoryId, c => c.CategoryId, (i, c) => {
                    return new {
                        ProductName = i.ProductName,
                        CategoryName = c.CategoryName,
                        Country = i.Country,
                        OrderDate = i.OrderDate,
                        UnitPrice = i.UnitPrice,
                        Quantity = i.Quantity
                    };
                });
            }
            protected override void OnAfterRender(bool firstRender) {
                if(firstRender)
                    Grid.ExpandGroupRow(2);
            }
            void Grid_UnboundColumnData(GridUnboundColumnDataEventArgs e) {
                if(e.FieldName == "Total") {
                    decimal price = (decimal)e.GetRowValue("UnitPrice");
                    short quantity = (short)e.GetRowValue("Quantity");
                    e.Value = price * quantity;
                }
            }
            protected void OnGroupingChanged(string key) {
                CurrentGroupIntervalKey = key;
                Grid.BeginUpdate();
                var column = Grid.GetColumns().First(c => c.FieldName == "OrderDate");
                column.GroupInterval = GroupIntervals[key];
                Grid.EndUpdate();
            }
        }
    </ChildContent>
    <OptionsContent>
        <OptionComboBox Label="Date Group Interval:" Data="@GroupIntervals.Keys" Value="@CurrentGroupIntervalKey" ValueChanged="@((string value) => OnGroupingChanged(value))" />
    </OptionsContent>
</DemoPageSectionComponent>

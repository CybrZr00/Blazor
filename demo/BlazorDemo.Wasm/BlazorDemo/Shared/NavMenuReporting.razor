@using BlazorDemo.Configuration
@inject DemoConfiguration Configuration
@inject IDemoReportSource DemoReportSource
<DxTreeView @ref="@treeView"
            CssClass="sidebar-tree"
            ExpandButtonIconCssClass="demo-icon-expand"
            CollapseButtonIconCssClass="demo-icon-collapse"
            AllowSelectNodes="true"
            NodeExpandCollapseAction="TreeViewNodeExpandCollapseAction.NodeClick"
            BeforeExpand="@BeforeExpand"
            SelectionChanged="@SelectionChanged">
    <Nodes>
        <DxTreeViewNode Expanded="true" Text="Report Viewer (Native)">
            <Nodes>
                @foreach(KeyValuePair<string, string> report in DemoReportSource.GetReportViewerList()) {
                    <DxTreeViewNode Text=@report.Value NavigateUrl="@ReportNames.GeneraterReportViewerUrl(report.Key)"></DxTreeViewNode>
                }
               
            </Nodes>
        </DxTreeViewNode>
        <DxTreeViewNode Text="Report Viewer (JavaScript based)">
            <Nodes>
                @foreach(KeyValuePair<string, string> report in DemoReportSource.GetReportList()) {
                    <DxTreeViewNode Text=@report.Value NavigateUrl="@ReportNames.GenerateUrl(report.Key)"></DxTreeViewNode>
                }
            </Nodes>
        </DxTreeViewNode>
        <DxTreeViewNode Text="Report Designer (JavaScript based)" NavigateUrl="ReportDesigner">
        </DxTreeViewNode>
    </Nodes>
</DxTreeView>

@code {
    DxTreeView treeView;

    protected void SelectionChanged(TreeViewNodeEventArgs e) {
        if(e.NodeInfo.IsLeaf) {
            var parentInfo = e.NodeInfo.Parent;
            if(parentInfo != null) {
                var parentSiblingNodesInfo = treeView.GetNodesInfo(n => !n.IsLeaf && n.Level == parentInfo.Level && !string.Equals(n.Text, parentInfo.Text));
                foreach(var nodeInfo in parentSiblingNodesInfo)
                    treeView.SetNodeExpanded(n => string.Equals(n.Text, nodeInfo.Text), false);
            } else
                treeView.CollapseAll();
        }
    }

    protected void BeforeExpand(TreeViewNodeCancelEventArgs e) {
        if(!e.CausedByAPI)
            treeView.CollapseAll();
    }

    bool IsDebug() {
#if DEBUG
        return true;
#else
    return false;
#endif
    }

}

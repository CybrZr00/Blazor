@using BlazorDemo.Configuration
@inject DemoConfiguration Configuration

<DxTreeView @ref="@treeView"
            CssClass="sidebar-tree"
            ExpandButtonIconCssClass="demo-icon-expand"
            CollapseButtonIconCssClass="demo-icon-collapse"
            AllowSelectNodes="true"
            NodeExpandCollapseAction="TreeViewNodeExpandCollapseAction.NodeClick"
            BeforeExpand="@BeforeExpand"
            SelectionChanged="@SelectionChanged">
    <Nodes>
        @foreach(var (currentPage, rootIndex) in Pages.Select((p, i) => (p, i))) {
            var rootDemoPage = currentPage as DemoRootPage;
            @if(!Configuration.IsServerSide && rootDemoPage != null && rootDemoPage.IsServerSideOnly)
                continue;
            <NavMenuLeaf Page="@currentPage"></NavMenuLeaf>
        }

    </Nodes>
</DxTreeView>
@code {
    DxTreeView treeView;

    [Parameter]
    public IEnumerable<DemoPageBase> Pages { get; set; }

    void SetParentNodeExpanded(ITreeViewNodeInfo node, Func<ITreeViewNodeInfo, bool> condition, bool expanded) {
        var parentInfo = node.Parent;
        if(parentInfo != null) {
            var parentSiblingNodesInfo = treeView.GetNodesInfo(n => !n.IsLeaf && n.Level == parentInfo.Level && condition(n));
            foreach(var nodeInfo in parentSiblingNodesInfo)
                treeView.SetNodeExpanded(n => string.Equals(n.Text, nodeInfo.Text), expanded);
        } else {
            treeView.CollapseAll();
        }
    }

    protected void SelectionChanged(TreeViewNodeEventArgs e) {
        if(e.NodeInfo.IsLeaf || e.NodeInfo.Parent != null) {
            SetParentNodeExpanded(e.NodeInfo, (ITreeViewNodeInfo n) => !string.Equals(n.Text, e.NodeInfo.Parent.Text), false);
        }
    }

    protected void BeforeExpand(TreeViewNodeCancelEventArgs e) {
        if(!e.CausedByAPI) {
            treeView.CollapseAll();

            ITreeViewNodeInfo node = e.NodeInfo;
            while(node.Parent != null) {
                SetParentNodeExpanded(node, (ITreeViewNodeInfo n) => string.Equals(n.Text, node.Parent.Text), true);
                node = node.Parent;
            }
        }
    }

}

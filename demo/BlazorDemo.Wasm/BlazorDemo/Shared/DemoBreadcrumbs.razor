@implements IDisposable
@inject DemoConfiguration Configuration
@inject NavigationManager NavigationManager

<div class="items">
    @foreach(var key in Items.Keys) {
        @if(!string.IsNullOrEmpty(Items[key])) {
            <a href="@Items[key]">@key</a>
        } else {
            <span>@key</span>
        }
        <span class="separator"></span>
    }
</div>

@code {
    const string HomePageTitle = "Home";
    Dictionary<string, string> Items { get; set; } = new Dictionary<string, string>();

    protected override void OnInitialized() {
        NavigationManager.LocationChanged += OnLocationChanged;
        UpdateItems(NavigationManager.Uri);
    }
    void OnLocationChanged(object sender, LocationChangedEventArgs args) {
        UpdateItems(args.Location);
    }
    void UpdateItems(string currentUri) {
        Items.Clear();

        var demoPage = Configuration.GetDemoPageByUrl(NavigationManager, currentUri);
        DemoRootPage rootDemoPage = null;
        if(demoPage is DemoRootPage)
            rootDemoPage = (DemoRootPage)demoPage;
        else if(demoPage is DemoPage && demoPage.ParentPage is DemoRootPage)
            rootDemoPage = (DemoRootPage)demoPage.ParentPage;
        if(rootDemoPage != null) {
            Items.Add(HomePageTitle, "./");
            if(demoPage != null) {
                var rootDemoPageUrl = DemoConfiguration.GetRootDemoPageUrl(rootDemoPage);
                Items.Add(rootDemoPage.Title, rootDemoPageUrl != demoPage.Url ? rootDemoPageUrl : "");
                Items.Add(demoPage.Title, "");
            }
        } else {
            Items.Add(HomePageTitle, "");
        }
        StateHasChanged();
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
